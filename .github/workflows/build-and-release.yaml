name: Cross-Platform Standalone Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        default: '0.0.0'

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Create virtual environment
      run: python -m venv .venv
    
    - name: Install Python dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        .venv\Scripts\activate
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install Python dependencies (Linux/macOS)
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: |
        source .venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install system dependencies (Linux only)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt install -y \
          binutils \
          libgl1 \
          libegl1 \
          libzbar0 \
          libgthread-2.0-0 \
          libxcb-cursor0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-render-util0 \
          libxcb-xinerama0 \
          libxkbcommon-x11-0 \
          libqt6core6 libqt6gui6 libqt6widgets6 qt6-base-dev
    
    - name: Install system dependencies (macOS only)
      if: runner.os == 'macOS'
      run: |
        brew install \
          qt6 \
          zbar \
          opencv \
          libxkbcommon \
          libxcb

    - name: Build application - CLI (Windows)
      if: runner.os == 'Windows'
      run: |
        .venv/Scripts/activate
        pyinstaller .\cli_main.py `
          --onefile `
          --icon="img/logo.ico" `
          --add-data="img:img" `
          --add-data="core:core" `
          --add-binary=".venv\Lib\site-packages\pyzbar\libiconv.dll:." `
          --add-binary=".venv\Lib\site-packages\pyzbar\libzbar-64.dll:." `
          --name QRebuild-CLI

    - name: Build application - GUI (Windows)
      if: runner.os == 'Windows'
      run: |
        .venv/Scripts/activate
        pyinstaller .\gui_main.py `
          --onefile `
          --windowed `
          --icon="img/logo.ico" `
          --add-data="img:img" `
          --add-data="core:core" `
          --add-binary=".venv\Lib\site-packages\pyzbar\libiconv.dll:." `
          --add-binary=".venv\Lib\site-packages\pyzbar\libzbar-64.dll:." `
          --name QRebuild-GUI

    - name: Build application - CLI (Linux)
      if: runner.os == 'Linux'
      run: |
        source .venv/bin/activate
        pyinstaller cli_main.py \
          --onefile \
          --icon="img/logo.png" \
          --add-data="core:core" \
          --add-data="cli:cli" \
          --add-data="img:img" \
          --add-binary="/usr/lib/x86_64-linux-gnu/libGL.so.1:." \
          --add-binary="/usr/lib/x86_64-linux-gnu/libgthread-2.0.so.0:." \
          --add-binary="/usr/lib/x86_64-linux-gnu/libzbar.so.0:." \
          --add-binary="/usr/lib/x86_64-linux-gnu/libEGL.so.1:." \
          --name QRebuild-CLI

    - name: Build application - GUI (Linux)
      if: runner.os == 'Linux'
      run: |
        source .venv/bin/activate
        pyinstaller gui_main.py \
          --onefile \
          --windowed \
          --icon="img/logo.png" \
          --add-data="core:core" \
          --add-data="img:img" \
          --add-binary="/usr/lib/x86_64-linux-gnu/libGL.so.1:." \
          --add-binary="/usr/lib/x86_64-linux-gnu/libgthread-2.0.so.0:." \
          --add-binary="/usr/lib/x86_64-linux-gnu/libzbar.so.0:." \
          --add-binary="/usr/lib/x86_64-linux-gnu/libEGL.so.1:." \
          --add-data="/home/runner/work/QRebuild/QRebuild/.venv/lib/python3.12/site-packages/PyQt6/Qt6/plugins/platforms:PyQt6/Qt6/plugins/platforms" \
          --collect-all PyQt6 \
          --name QRebuild-GUI

    - name: Build application - CLI (macOS)
      if: runner.os == 'macOS'
      run: |
        source .venv/bin/activate
        pyinstaller cli_main.py \
          --onefile \
          --icon="img/logo.icns" \
          --add-data="core:core" \
          --add-data="cli:cli" \
          --add-data="img:img" \
          --add-binary="/opt/homebrew/lib/libzbar.dylib:." \
          --name QRebuild-CLI

    - name: Build application - GUI (macOS)
      if: runner.os == 'macOS'
      run: |
        source .venv/bin/activate
        export QT_PLUGIN_PATH="$(brew --prefix qt6)/plugins"
        pyinstaller gui_main.py \
          --onefile \
          --windowed \
          --icon="img/logo.icns" \
          --add-data="core:core" \
          --add-data="img:img" \
          --add-binary="/opt/homebrew/lib/libzbar.dylib:." \
          --collect-all PyQt6 \
          --name QRebuild-GUI

    - name: Prepare versioned artifacts (Windows)
      if: runner.os == 'Windows'
      run: |
        mkdir -p release
        cp dist/QRebuild-CLI.exe "release/QRebuild-CLI-${{inputs.version}}-${{runner.os}}.exe"
        cp dist/QRebuild-GUI.exe "release/QRebuild-GUI-${{inputs.version}}-${{runner.os}}.exe"

    - name: Prepare versioned artifacts (Windows)
      if: runner.os != 'Windows'
      run: |
        mkdir -p release
        cp dist/QRebuild-CLI "release/QRebuild-CLI-${{inputs.version}}-${{runner.os}}"
        cp dist/QRebuild-GUI "release/QRebuild-GUI-${{inputs.version}}-${{runner.os}}"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ runner.os }}
        path: release/

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event.inputs.version != '0.0.0'

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.event.inputs.version }}
        name: QRebuild ${{ github.event.inputs.version }}
        files: |
          artifacts/binaries-*/*
        draft: false
        prerelease: false

    - name: Update Latest Tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Delete existing latest tag
        curl -s -X DELETE \
          -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/latest" || true
        
        # Create new latest tag
        curl -s -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"ref": "refs/tags/latest", "sha": "${{ github.sha }}"}' \
          "https://api.github.com/repos/${{ github.repository }}/git/refs"